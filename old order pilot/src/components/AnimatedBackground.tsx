'use client';

import { useEffect, useRef } from 'react';

export default function AnimatedBackground() {
  const containerRef = useRef<HTMLDivElement>(null);
  const initializedRef = useRef(false);

  useEffect(() => {
    if (!containerRef.current || initializedRef.current) return;
    
    initializedRef.current = true;
    
    const container = containerRef.current;
    const numCircles = 400; // Increased for continuous wave pattern
    const circles: HTMLDivElement[] = [];

    // Create circles with initial positions - better distribution
    for (let i = 0; i < numCircles; i++) {
      const circle = document.createElement('div');
      circle.className = 'absolute rounded-full pointer-events-none';
      
      // All balls same size: 8px
      const size = 8;
      
      circle.style.width = size + 'px';
      circle.style.height = size + 'px';
      circle.style.backgroundColor = '#4a90e2';
      circle.style.position = 'absolute';
      
      // Better distribution - start from negative position to ensure full coverage
      const initialP = (i / numCircles) % 1;
      const extendedWidth = window.innerWidth * 1.5; // Extend 50% beyond screen width
      const startOffset = -window.innerWidth * 0.25; // Start 25% before screen left edge
      const initialX = startOffset + extendedWidth * initialP;
      const initialY = window.innerHeight / 2 + Math.sin(initialP * 20 + i * 0.1) * 100;
      
      circle.style.left = initialX + 'px';
      circle.style.top = initialY + 'px';
      
      container.appendChild(circle);
      circles.push(circle);
    }

    // High-performance animation loop using setInterval instead of requestAnimationFrame
    let time = 0;
    const intervalId = setInterval(() => {
      time += 0.01; // Slower movement
      
      circles.forEach((circle, i) => {
        const p = (i / numCircles + time * 0.02) % 1; // Slightly slower for better coverage
        const extendedWidth = window.innerWidth * 1.5; // Extend 50% beyond screen width
        const startOffset = -window.innerWidth * 0.25; // Start 25% before screen left edge
        const x = startOffset + extendedWidth * p;
        const y = window.innerHeight / 2 + Math.sin(p * 20 + time * 1.2 + i * 0.1) * 100; // Slightly slower vertical movement
        
        circle.style.left = x + 'px';
        circle.style.top = y + 'px';
      });
    }, 16); // 60fps

    // Cleanup function
    return () => {
      clearInterval(intervalId);
      // Remove all circles
      while (container.firstChild) {
        container.removeChild(container.firstChild);
      }
    };
  }, []); // Empty dependency array - runs once on mount

  return (
    <div className="pointer-events-none fixed inset-0 overflow-hidden z-0">
      <div ref={containerRef} className="absolute inset-0">
        {/* Circles will be generated by JavaScript */}
      </div>
    </div>
  );
}
